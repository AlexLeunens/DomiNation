private static void nextTurn() {
		String orientation;
		int[] coordinates = new int[2];

		// clears the next order of players
		Players.newOrder.replaceAll(e -> null);
		System.out.println(Players.newOrder);
		// new domino line
		Domino.nextDominos();

		do { // do while used for 2 players
			for (Players player : Players.allPlayers) {
				// check if domino can be placed
				
				Domino.iA(player.playerPlateau, 1, 1, 1, 0.01, 1);
				Domino.afficherPlateau();
				
			}

			// currentDominos deleted in placeDomino
			// added in chooseDomino then sorted
			Collections.sort(Domino.currentDominos);

			// same with allPlayers and newOrder
			System.out.println(Players.newOrder);
			Players.allPlayers.clear();
			Players.allPlayers.addAll(Players.newOrder);

			if (Domino.allDominoes.size() == 0) { // TODO: other finishing checks
				Plateau.endGame();
			} else {
				nextTurn();
			}

		} while (!Domino.playableDominos.isEmpty());

		// TODO: if can't place domino throw it away
	}
  
  private static ArrayList<String> getNullCases1(Plateau plateau, int x, int y) {
		ArrayList<String> near = new ArrayList<String>();

		if (x-1 < 0) { // above
			near.add("horsplateau");
		}
		
		else{
			near.add(plateau.cases[x - 1][y]); // above
			
		}
		
		if (y+1 > 9) { // right
			near.add("horsplateau");
		}else {
		near.add(plateau.cases[x][y + 1]); // right
		}
		
		if (x+1 > 9) { // below
			near.add("horsplateau");
		}else {
		near.add(plateau.cases[x + 1][y]); // below
		}
		
		if (y-1 < 0) { // left
			near.add("horsplateau");
		}else {
		near.add(plateau.cases[x][y - 1]); // left
		}
		
		return near;
	}
public static int iA(Plateau plateau, int c1, int c2, int c3, double c4, int d){
		ArrayList<Domino> domJouable = playableDom(plateau);
		Domino domBest = domJouable.get(0);
		double scoreMem = 0;
		int x1 = 0;
		int y1 = 0;
		int x2 = 0;
		int y2 = 0;
		//si aucun domino jouable on prend le plus petit nombre pour rejouer premier
		if (domJouable.isEmpty()) {
			currentDominos.add(playableDominos.get(0));
			playableDominos.remove(playableDominos.get(0));
			return 1;
		}
		for (Domino domino: domJouable) {
			//TODO : réparer donction invest et nbrPoint
			//System.out.println("nombre de couronne" + crownDom(domino));
			
			System.out.println("nombre de point en plus" + nbrPoint(plateau,domino).get(0) + "à la position : " + nbrPoint(plateau,domino));
			
			double score = c1 * nbrPoint(plateau,domino).get(0) + c2 * crownDom(domino) + c3 * centerTownHall(plateau,domino) + c4 * invest(domino) + d * 0 ;
			System.out.println("score :" + score);
			if (score > scoreMem) {
				domBest = domino;
				scoreMem = score;
			}
		}
		ArrayList<ArrayList<Integer>> centrerChateau = positionsCentrer(plateau,domBest);
		System.out.println("position centrer :" + centrerChateau);
		System.out.println("Possibilité de centrer :" + centerTownHall(plateau,domBest));
		ArrayList<ArrayList<Integer>> positionJouable = playablePosition(domBest,plateau);
		ArrayList<Integer> bestPointArea = nbrPoint(plateau,domBest);
		//Si ce domino peut conserver le chateau centrer on le fait
		if (centerTownHall(plateau,domBest) == 1) {
			
			if (appartient(bestPointArea,centrerChateau)) {
				x1 = bestPointArea.get(0);
				y1 = bestPointArea.get(1);
				x2 = bestPointArea.get(2);
				y2 = bestPointArea.get(3);
			
			}
			else{
				x1 = centrerChateau.get(0).get(0);
				y1 = centrerChateau.get(0).get(1);
				x2 = centrerChateau.get(0).get(2);
				y2 = centrerChateau.get(0).get(3);
			
		}
		}
		//Sinon on prend la première position jouable pour le domino
		else {
			x1 = positionJouable.get(0).get(0);
			y1 = positionJouable.get(0).get(1);
			x2 = positionJouable.get(0).get(2);
			y2 = positionJouable.get(0).get(3);
		}
		plateau.cases[x1][y1] = domBest.type1;
		plateau.cases[x2][y2] = domBest.type2;
		plateau.couronnes[x2][y2] = domBest.nbCouronne1;
		plateau.couronnes[x2][y2] = domBest.nbCouronne2;
		currentDominos.add(domBest);
		playableDominos.remove(domBest);
		return 1;
	}
public static int invest(Domino domino) {
		int nbrType = 0;
		int nbrCouronne = 0;
		int ptPotentiel;
		for (Domino dominoRestant : allDominoes) {
			if (domino.type1.equals(dominoRestant.type1)){
				nbrType++;
				nbrCouronne = nbrCouronne + dominoRestant.nbCouronne1;
			}
			if (domino.type1.equals(dominoRestant.type2)) {
				nbrType++;
				nbrCouronne = nbrCouronne + dominoRestant.nbCouronne2;
			}
			if (domino.type2.equals(dominoRestant.type1)){
				nbrType++;
				nbrCouronne = nbrCouronne + dominoRestant.nbCouronne1;
			}
			if (domino.type2.equals(dominoRestant.type2)) {
				nbrType++;
				nbrCouronne = nbrCouronne + dominoRestant.nbCouronne2;
			}
		}
		//System.out.print("nbrType :" + nbrType);
		//System.out.print("nbrCrown :" + nbrCouronne);
		ptPotentiel = nbrType * nbrCouronne;
		return ptPotentiel;
		}
    public static int centerTownHall(Plateau plateau, Domino domino) {
		// Pour chaque domino on va retourner leur position qui permettent le centrage de l'hdv
		ArrayList<ArrayList<Integer>> positionJouable = playablePosition(domino, plateau);
		int compteur = 0;
		for (ArrayList<Integer> position : positionJouable) {
			for (int coordonnées : position) {
				
				//Si une des coordonnées est déjà pas compatible on peut sortir de la boucle for
				if ((coordonnées > 6) || (coordonnées < 2)){
					break;
				}
				//Si la coordonnées convient on ajoute 1 au compteur
				if ((coordonnées <= 6) || (coordonnées >= 2)) {
					compteur++;
				}
			}
			// Si compteur égal à 4 les 4 coordonnées la position du domino va permettre le centrage du chateau
			if (compteur == 4) {
				// On renvoie la valeur de vérif
				return 1;
			//Si c'est pas le cas il faut reinitialiser le compteur à 0 pour tester la prochaine position
			}else {
				compteur = 0;
			}
		}
		return 0;
	}
  
  public static ArrayList<ArrayList<Integer>> positionsCentrer(Plateau plateau, Domino domino) {
		// Pour chaque domino on va retourner leur position qui permettent le centrage de l'hdv
		ArrayList<ArrayList<Integer>> positionJouable = playablePosition(domino, plateau);
		ArrayList<Integer> coordCorrect = new ArrayList<Integer>();
		ArrayList<ArrayList<Integer>> positionsCentrer = new ArrayList<ArrayList<Integer>>();
		int compteur = 0;
		for (ArrayList<Integer> position : positionJouable) {
			for (int coordonnées : position) {
				
				//Si une des coordonnées est déjà pas compatible on peut sortir de la boucle for
				if ((coordonnées > 6) || (coordonnées < 2)){
					break;
				}
				//Si la coordonnées convient on ajoute 1 au compteur
				if ((coordonnées <= 6) || (coordonnées >= 2)) {
					coordCorrect.add(coordonnées);
					compteur++;
				}
			}
			// Si compteur égal à 4 les 4 coordonnées la position du domino va permettre le centrage du chateau
			if (compteur == 4) {
				// On renvoie la coordonnée de la 1er position coorect
				positionsCentrer.add(new ArrayList<Integer>(coordCorrect));
				coordCorrect.clear();
			//Si c'est pas le cas il faut reinitialiser le compteur à 0 pour tester la prochaine position
			}else {
				coordCorrect.clear();
				compteur = 0;
			}
		}
		return positionsCentrer;
	}
  // retourne la somme des couronnes sur le domino
  public static int crownDom(Domino domino) {
		int crown = domino.nbCouronne1 + domino.nbCouronne2;
		return crown;
		}
	
	public static boolean appartient(ArrayList<Integer> bestPositionPoint,ArrayList<ArrayList<Integer>> positionsCentrer) {
		bestPositionPoint.remove(0);
		if (positionsCentrer.contains(bestPositionPoint)) {
			return true;
		}
		return false;
		}
    	public static ArrayList<Domino> playableDom(Plateau plateau) {
		ArrayList<Domino> domJouable = new ArrayList<Domino>();
			//On balaye tous les dominos qu'il reste
			for (Domino domino : playableDominos) {
				//test si la liste n'est pas vide
				if (!playablePosition(domino, plateau).isEmpty()) {
					// On ajoute les domino jouable à la liste
					 domJouable.add(domino);
				}
			}
			//retourne la liste des dominos jouable
			return domJouable;
	}
  public static ArrayList<Integer> nbrPoint(Plateau plateau, Domino domino) {
			ArrayList<Integer> bestNumDomino = new ArrayList<Integer>();
			ArrayList<ArrayList<Integer>> positionJouable = playablePosition(domino, plateau);
			int scoreMax = -1;
			for (ArrayList<Integer> position : positionJouable) {
				//Création d'un plateau virtuel avec le domino posé à une des positions possibl
				Plateau plateauVirtuel = copy(plateau);
				plateauVirtuel.cases[position.get(0)][position.get(1)] = domino.type1;
				plateauVirtuel.cases[position.get(2)][position.get(3)] = domino.type2;
				plateauVirtuel.couronnes[position.get(0)][position.get(1)] = domino.nbCouronne1;
				plateauVirtuel.couronnes[position.get(2)][position.get(3)] = domino.nbCouronne2;
				//lancemenent de la fonction comptage de point du coup après avoir joué ce domino on garde en valeur cette valeur
				int score[] = { 0, 0 }; // mult, couronnes
				int scoreTotal = 0;
				boolean[][] checkedCases = new boolean[NB_CASES][NB_CASES];
				for (int i = 0; i < plateau.cases.length; i++) { // rows
					for (int j = 0; j < plateau.cases[0].length; j++) { // columns
						int mult[] = Plateau.countScore(plateauVirtuel, i, j, score, checkedCases);
						scoreTotal = scoreTotal + mult[0] * mult[1];
						score[0] = 0;
						score[1] = 0;
					}
		
				}
				
				checkedCases = new boolean[NB_CASES][NB_CASES];
				//initialisation de la liste qui retournera le nombre de point avec sa position
				if ((scoreTotal > scoreMax) && (bestNumDomino.isEmpty())){
					scoreMax = scoreTotal;
					bestNumDomino.add(scoreMax);
					bestNumDomino.add(position.get(0));
					bestNumDomino.add(position.get(1));
					bestNumDomino.add(position.get(2));
					bestNumDomino.add(position.get(3));
				//Si la liste est deja initialisé on changera les valeurs de cette liste
				}else if ((scoreTotal > scoreMax)){
					scoreMax = scoreTotal;
					bestNumDomino.set(0,scoreMax);
					bestNumDomino.set(1,position.get(0));
					bestNumDomino.set(2,position.get(1));
					bestNumDomino.set(3,position.get(2));
					bestNumDomino.set(4,position.get(3));
				}
			}

			//On retourne la position optimiser et son nombre de point
			return bestNumDomino;
		}
    
    public static Plateau copy(Plateau plateau){
			Plateau plateauVirtuel = new Plateau();
		    for(int i=0; i<9; i++) {
		        for(int j=0; j<9; j++) {
		        	plateauVirtuel.cases[i][j] = plateau.cases[i][j];
					plateauVirtuel.couronnes[i][j] = plateau.couronnes[i][j];
		        }
		    }
		    return plateauVirtuel;
		}
    public static ArrayList<ArrayList<Integer>> playablePosition(Domino domino, Plateau plateau) {
			ArrayList<String> validCases = new ArrayList<String>();
			ArrayList<Integer> coordonnée = new ArrayList<Integer>();
			ArrayList<ArrayList<Integer>> dominoPosition = new ArrayList<ArrayList<Integer>>();
			validCases.add(domino.type1);
			validCases.add(domino.type2);
			validCases.add("Château");
			ArrayList<String> validType1 = new ArrayList<String>();
			validType1.add(domino.type1);
			validType1.add("Château");
			
			// for every case
			for (int i = 0; i < plateau.cases.length; i++) { // rows
				for (int j = 0; j < plateau.cases[0].length; j++) { // columns
					// if checked contains a possible solutions
					if (validCases.contains(plateau.cases[i][j])) {
						// if the surrounding case is free
						if (plateau.cases[i + 1][j] == null) {
							ArrayList<String> near = getNullCases1(plateau, i + 1, j);
							// if one of the near cases is free
							if (near.get(1)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i+1);
									coordonnée.add(j);
									coordonnée.add(i+1);
									coordonnée.add(j+1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i+1);
									coordonnée.add(j+1);
									coordonnée.add(i+1);
									coordonnée.add(j);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
								}
							
							if (near.get(2)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i+1);
									coordonnée.add(j);
									coordonnée.add(i+2);
									coordonnée.add(j);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i+2);
									coordonnée.add(j);
									coordonnée.add(i+1);
									coordonnée.add(j);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
							if (near.get(3)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i+1);
									coordonnée.add(j);
									coordonnée.add(i+1);
									coordonnée.add(j-1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i+1);
									coordonnée.add(j-1);
									coordonnée.add(i+1);
									coordonnée.add(j);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
						}
						if (plateau.cases[i - 1][j] == null) {
							ArrayList<String> near = getNullCases1(plateau, i - 1, j);
							if (near.get(0)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i-1);
									coordonnée.add(j);
									coordonnée.add(i-2);
									coordonnée.add(j);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i-2);
									coordonnée.add(j);
									coordonnée.add(i-1);
									coordonnée.add(j);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
							if (near.get(1)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i-1);
									coordonnée.add(j);
									coordonnée.add(i-1);
									coordonnée.add(j+1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i-1);
									coordonnée.add(j+1);
									coordonnée.add(i-1);
									coordonnée.add(j);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
							if (near.get(3)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i-1);
									coordonnée.add(j);
									coordonnée.add(i-1);
									coordonnée.add(j-1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i-1);
									coordonnée.add(j-1);
									coordonnée.add(i-1);
									coordonnée.add(j);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
						}
						if (plateau.cases[i][j + 1] == null) {
							ArrayList<String> near = getNullCases1(plateau, i, j + 1);
							if (near.get(0)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i);
									coordonnée.add(j+1);
									coordonnée.add(i-1);
									coordonnée.add(j+1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i-1);
									coordonnée.add(j+1);
									coordonnée.add(i);
									coordonnée.add(j+1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
							if (near.get(1)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i);
									coordonnée.add(j+1);
									coordonnée.add(i);
									coordonnée.add(j+2);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i);
									coordonnée.add(j+2);
									coordonnée.add(i);
									coordonnée.add(j+1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
							if (near.get(2)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i);
									coordonnée.add(j+1);
									coordonnée.add(i+1);
									coordonnée.add(j+1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i);
									coordonnée.add(j+1);
									coordonnée.add(i+1);
									coordonnée.add(j+1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
						}
						if (plateau.cases[i][j - 1] == null) {
							ArrayList<String> near = getNullCases1(plateau, i, j - 1);
							if (near.get(0)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i);
									coordonnée.add(j-1);
									coordonnée.add(i-1);
									coordonnée.add(j-1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i-1);
									coordonnée.add(j-1);
									coordonnée.add(i);
									coordonnée.add(j-1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
							if (near.get(2)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i);
									coordonnée.add(j-1);
									coordonnée.add(i+1);
									coordonnée.add(j-1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i+1);
									coordonnée.add(j-1);
									coordonnée.add(i);
									coordonnée.add(j-1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
							if (near.get(3)==null) {
								if (validType1.contains(plateau.cases[i][j])) {
									coordonnée.add(i);
									coordonnée.add(j-1);
									coordonnée.add(i);
									coordonnée.add(j-2);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();
								}else {
									coordonnée.add(i);
									coordonnée.add(j-2);
									coordonnée.add(i);
									coordonnée.add(j-1);
									dominoPosition.add(new ArrayList<Integer>(coordonnée));
									coordonnée.clear();	
									}
							}
						}

					}

				}
			}
			return dominoPosition;

	}
